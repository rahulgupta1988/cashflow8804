package cashflowdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cashflowdb.Subscription;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBSCRIPTION".
*/
public class SubscriptionDao extends AbstractDao<Subscription, Long> {

    public static final String TABLENAME = "SUBSCRIPTION";

    /**
     * Properties of entity Subscription.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SubscriptionStartDate = new Property(1, java.util.Date.class, "subscriptionStartDate", false, "SUBSCRIPTION_START_DATE");
        public final static Property SubscriptionEndDate = new Property(2, java.util.Date.class, "subscriptionEndDate", false, "SUBSCRIPTION_END_DATE");
        public final static Property AdminName = new Property(3, String.class, "adminName", false, "ADMIN_NAME");
        public final static Property IsSubscribed = new Property(4, Boolean.class, "isSubscribed", false, "IS_SUBSCRIBED");
        public final static Property AdminPassword = new Property(5, String.class, "adminPassword", false, "ADMIN_PASSWORD");
    };


    public SubscriptionDao(DaoConfig config) {
        super(config);
    }
    
    public SubscriptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBSCRIPTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUBSCRIPTION_START_DATE\" INTEGER," + // 1: subscriptionStartDate
                "\"SUBSCRIPTION_END_DATE\" INTEGER," + // 2: subscriptionEndDate
                "\"ADMIN_NAME\" TEXT," + // 3: adminName
                "\"IS_SUBSCRIBED\" INTEGER," + // 4: isSubscribed
                "\"ADMIN_PASSWORD\" TEXT);"); // 5: adminPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBSCRIPTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Subscription entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date subscriptionStartDate = entity.getSubscriptionStartDate();
        if (subscriptionStartDate != null) {
            stmt.bindLong(2, subscriptionStartDate.getTime());
        }
 
        java.util.Date subscriptionEndDate = entity.getSubscriptionEndDate();
        if (subscriptionEndDate != null) {
            stmt.bindLong(3, subscriptionEndDate.getTime());
        }
 
        String adminName = entity.getAdminName();
        if (adminName != null) {
            stmt.bindString(4, adminName);
        }
 
        Boolean isSubscribed = entity.getIsSubscribed();
        if (isSubscribed != null) {
            stmt.bindLong(5, isSubscribed ? 1L: 0L);
        }
 
        String adminPassword = entity.getAdminPassword();
        if (adminPassword != null) {
            stmt.bindString(6, adminPassword);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Subscription readEntity(Cursor cursor, int offset) {
        Subscription entity = new Subscription( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // subscriptionStartDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // subscriptionEndDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adminName
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isSubscribed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // adminPassword
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Subscription entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubscriptionStartDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setSubscriptionEndDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAdminName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSubscribed(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setAdminPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Subscription entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Subscription entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
