package cashflowdb;

import java.util.List;
import cashflowdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CATEGORY".
 */
public class Category {

    private Long id;
    private String catname;
    private String inorexp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private List<Source> sourceList;
    private List<InOutTransaction> inOutTransactionList;

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String catname, String inorexp) {
        this.id = id;
        this.catname = catname;
        this.inorexp = inorexp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCatname() {
        return catname;
    }

    public void setCatname(String catname) {
        this.catname = catname;
    }

    public String getInorexp() {
        return inorexp;
    }

    public void setInorexp(String inorexp) {
        this.inorexp = inorexp;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Source> getSourceList() {
        if (sourceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SourceDao targetDao = daoSession.getSourceDao();
            List<Source> sourceListNew = targetDao._queryCategory_SourceList(id);
            synchronized (this) {
                if(sourceList == null) {
                    sourceList = sourceListNew;
                }
            }
        }
        return sourceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSourceList() {
        sourceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<InOutTransaction> getInOutTransactionList() {
        if (inOutTransactionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InOutTransactionDao targetDao = daoSession.getInOutTransactionDao();
            List<InOutTransaction> inOutTransactionListNew = targetDao._queryCategory_InOutTransactionList(id);
            synchronized (this) {
                if(inOutTransactionList == null) {
                    inOutTransactionList = inOutTransactionListNew;
                }
            }
        }
        return inOutTransactionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInOutTransactionList() {
        inOutTransactionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
