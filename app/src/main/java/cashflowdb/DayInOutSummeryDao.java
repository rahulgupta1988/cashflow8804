package cashflowdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cashflowdb.DayInOutSummery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_IN_OUT_SUMMERY".
*/
public class DayInOutSummeryDao extends AbstractDao<DayInOutSummery, Long> {

    public static final String TABLENAME = "DAY_IN_OUT_SUMMERY";

    /**
     * Properties of entity DayInOutSummery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Income_pound = new Property(1, Double.class, "income_pound", false, "INCOME_POUND");
        public final static Property Expense_pound = new Property(2, Double.class, "expense_pound", false, "EXPENSE_POUND");
        public final static Property Balance_in_hand = new Property(3, Double.class, "balance_in_hand", false, "BALANCE_IN_HAND");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Is_worst_case = new Property(5, Boolean.class, "is_worst_case", false, "IS_WORST_CASE");
        public final static Property Is_debt = new Property(6, Boolean.class, "is_debt", false, "IS_DEBT");
    };


    public DayInOutSummeryDao(DaoConfig config) {
        super(config);
    }
    
    public DayInOutSummeryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_IN_OUT_SUMMERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INCOME_POUND\" REAL," + // 1: income_pound
                "\"EXPENSE_POUND\" REAL," + // 2: expense_pound
                "\"BALANCE_IN_HAND\" REAL," + // 3: balance_in_hand
                "\"DATE\" INTEGER," + // 4: date
                "\"IS_WORST_CASE\" INTEGER," + // 5: is_worst_case
                "\"IS_DEBT\" INTEGER);"); // 6: is_debt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_IN_OUT_SUMMERY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DayInOutSummery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double income_pound = entity.getIncome_pound();
        if (income_pound != null) {
            stmt.bindDouble(2, income_pound);
        }
 
        Double expense_pound = entity.getExpense_pound();
        if (expense_pound != null) {
            stmt.bindDouble(3, expense_pound);
        }
 
        Double balance_in_hand = entity.getBalance_in_hand();
        if (balance_in_hand != null) {
            stmt.bindDouble(4, balance_in_hand);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        Boolean is_worst_case = entity.getIs_worst_case();
        if (is_worst_case != null) {
            stmt.bindLong(6, is_worst_case ? 1L: 0L);
        }
 
        Boolean is_debt = entity.getIs_debt();
        if (is_debt != null) {
            stmt.bindLong(7, is_debt ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DayInOutSummery readEntity(Cursor cursor, int offset) {
        DayInOutSummery entity = new DayInOutSummery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // income_pound
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // expense_pound
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // balance_in_hand
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // is_worst_case
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // is_debt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DayInOutSummery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIncome_pound(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setExpense_pound(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setBalance_in_hand(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIs_worst_case(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIs_debt(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DayInOutSummery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DayInOutSummery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
