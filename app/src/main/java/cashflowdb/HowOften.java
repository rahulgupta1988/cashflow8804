package cashflowdb;

import cashflowdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "HOW_OFTEN".
 */
public class HowOften {

    private Long id;
    private String often;
    private long sourceid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HowOftenDao myDao;

    private Source source;
    private Long source__resolvedKey;


    public HowOften() {
    }

    public HowOften(Long id) {
        this.id = id;
    }

    public HowOften(Long id, String often, long sourceid) {
        this.id = id;
        this.often = often;
        this.sourceid = sourceid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHowOftenDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getOften() {
        return often;
    }

    public void setOften(String often) {
        this.often = often;
    }

    public long getSourceid() {
        return sourceid;
    }

    public void setSourceid(long sourceid) {
        this.sourceid = sourceid;
    }

    /** To-one relationship, resolved on first access. */
    public Source getSource() {
        long __key = this.sourceid;
        if (source__resolvedKey == null || !source__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SourceDao targetDao = daoSession.getSourceDao();
            Source sourceNew = targetDao.load(__key);
            synchronized (this) {
                source = sourceNew;
            	source__resolvedKey = __key;
            }
        }
        return source;
    }

    public void setSource(Source source) {
        if (source == null) {
            throw new DaoException("To-one property 'sourceid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.source = source;
            sourceid = source.getId();
            source__resolvedKey = sourceid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
