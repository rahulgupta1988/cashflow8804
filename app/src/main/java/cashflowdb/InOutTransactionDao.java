package cashflowdb;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import cashflowdb.InOutTransaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN_OUT_TRANSACTION".
*/
public class InOutTransactionDao extends AbstractDao<InOutTransaction, Long> {

    public static final String TABLENAME = "IN_OUT_TRANSACTION";

    /**
     * Properties of entity InOutTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Transactiondate = new Property(1, java.util.Date.class, "transactiondate", false, "TRANSACTIONDATE");
        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
        public final static Property Pound = new Property(3, Double.class, "pound", false, "POUND");
        public final static Property Howoften = new Property(4, String.class, "howoften", false, "HOWOFTEN");
        public final static Property Nextdate = new Property(5, java.util.Date.class, "nextdate", false, "NEXTDATE");
        public final static Property Isrepetitive = new Property(6, Boolean.class, "isrepetitive", false, "ISREPETITIVE");
        public final static Property Categoryid = new Property(7, long.class, "categoryid", false, "CATEGORYID");
        public final static Property Sourceid = new Property(8, long.class, "sourceid", false, "SOURCEID");
    };

    private DaoSession daoSession;

    private Query<InOutTransaction> source_InOutTransactionListQuery;
    private Query<InOutTransaction> category_InOutTransactionListQuery;

    public InOutTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public InOutTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN_OUT_TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRANSACTIONDATE\" INTEGER," + // 1: transactiondate
                "\"COMMENT\" TEXT," + // 2: comment
                "\"POUND\" REAL," + // 3: pound
                "\"HOWOFTEN\" TEXT," + // 4: howoften
                "\"NEXTDATE\" INTEGER," + // 5: nextdate
                "\"ISREPETITIVE\" INTEGER," + // 6: isrepetitive
                "\"CATEGORYID\" INTEGER NOT NULL ," + // 7: categoryid
                "\"SOURCEID\" INTEGER NOT NULL );"); // 8: sourceid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN_OUT_TRANSACTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InOutTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date transactiondate = entity.getTransactiondate();
        if (transactiondate != null) {
            stmt.bindLong(2, transactiondate.getTime());
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
 
        Double pound = entity.getPound();
        if (pound != null) {
            stmt.bindDouble(4, pound);
        }
 
        String howoften = entity.getHowoften();
        if (howoften != null) {
            stmt.bindString(5, howoften);
        }
 
        java.util.Date nextdate = entity.getNextdate();
        if (nextdate != null) {
            stmt.bindLong(6, nextdate.getTime());
        }
 
        Boolean isrepetitive = entity.getIsrepetitive();
        if (isrepetitive != null) {
            stmt.bindLong(7, isrepetitive ? 1L: 0L);
        }
        stmt.bindLong(8, entity.getCategoryid());
        stmt.bindLong(9, entity.getSourceid());
    }

    @Override
    protected void attachEntity(InOutTransaction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InOutTransaction readEntity(Cursor cursor, int offset) {
        InOutTransaction entity = new InOutTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // transactiondate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // pound
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // howoften
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // nextdate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isrepetitive
            cursor.getLong(offset + 7), // categoryid
            cursor.getLong(offset + 8) // sourceid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InOutTransaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactiondate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPound(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setHowoften(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNextdate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIsrepetitive(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCategoryid(cursor.getLong(offset + 7));
        entity.setSourceid(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InOutTransaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InOutTransaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "inOutTransactionList" to-many relationship of Source. */
    public List<InOutTransaction> _querySource_InOutTransactionList(long sourceid) {
        synchronized (this) {
            if (source_InOutTransactionListQuery == null) {
                QueryBuilder<InOutTransaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sourceid.eq(null));
                source_InOutTransactionListQuery = queryBuilder.build();
            }
        }
        Query<InOutTransaction> query = source_InOutTransactionListQuery.forCurrentThread();
        query.setParameter(0, sourceid);
        return query.list();
    }

    /** Internal query to resolve the "inOutTransactionList" to-many relationship of Category. */
    public List<InOutTransaction> _queryCategory_InOutTransactionList(long categoryid) {
        synchronized (this) {
            if (category_InOutTransactionListQuery == null) {
                QueryBuilder<InOutTransaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Categoryid.eq(null));
                category_InOutTransactionListQuery = queryBuilder.build();
            }
        }
        Query<InOutTransaction> query = category_InOutTransactionListQuery.forCurrentThread();
        query.setParameter(0, categoryid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSourceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM IN_OUT_TRANSACTION T");
            builder.append(" LEFT JOIN SOURCE T0 ON T.\"SOURCEID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CATEGORY T1 ON T.\"CATEGORYID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InOutTransaction loadCurrentDeep(Cursor cursor, boolean lock) {
        InOutTransaction entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Source source = loadCurrentOther(daoSession.getSourceDao(), cursor, offset);
         if(source != null) {
            entity.setSource(source);
        }
        offset += daoSession.getSourceDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }

        return entity;    
    }

    public InOutTransaction loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InOutTransaction> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InOutTransaction> list = new ArrayList<InOutTransaction>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InOutTransaction> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InOutTransaction> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
