package cashflowdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cashflowdb.FinancialYear;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINANCIAL_YEAR".
*/
public class FinancialYearDao extends AbstractDao<FinancialYear, Long> {

    public static final String TABLENAME = "FINANCIAL_YEAR";

    /**
     * Properties of entity FinancialYear.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Startdate = new Property(1, java.util.Date.class, "startdate", false, "STARTDATE");
        public final static Property Enddate = new Property(2, java.util.Date.class, "enddate", false, "ENDDATE");
        public final static Property Competed = new Property(3, String.class, "competed", false, "COMPETED");
    };


    public FinancialYearDao(DaoConfig config) {
        super(config);
    }
    
    public FinancialYearDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINANCIAL_YEAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STARTDATE\" INTEGER," + // 1: startdate
                "\"ENDDATE\" INTEGER," + // 2: enddate
                "\"COMPETED\" TEXT);"); // 3: competed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINANCIAL_YEAR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FinancialYear entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindLong(2, startdate.getTime());
        }
 
        java.util.Date enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindLong(3, enddate.getTime());
        }
 
        String competed = entity.getCompeted();
        if (competed != null) {
            stmt.bindString(4, competed);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FinancialYear readEntity(Cursor cursor, int offset) {
        FinancialYear entity = new FinancialYear( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startdate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // enddate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // competed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FinancialYear entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartdate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEnddate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCompeted(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FinancialYear entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FinancialYear entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
