package cashflowdb;

import java.util.List;
import cashflowdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SOURCE".
 */
public class Source {

    private Long id;
    private String sourcename;
    private Boolean isChecked;
    private Boolean isMandatory;
    private long categoryid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SourceDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private List<HowOften> howOftenList;
    private List<InOutTransaction> inOutTransactionList;

    public Source() {
    }

    public Source(Long id) {
        this.id = id;
    }

    public Source(Long id, String sourcename, Boolean isChecked, Boolean isMandatory, long categoryid) {
        this.id = id;
        this.sourcename = sourcename;
        this.isChecked = isChecked;
        this.isMandatory = isMandatory;
        this.categoryid = categoryid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSourceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSourcename() {
        return sourcename;
    }

    public void setSourcename(String sourcename) {
        this.sourcename = sourcename;
    }

    public Boolean getIsChecked() {
        return isChecked;
    }

    public void setIsChecked(Boolean isChecked) {
        this.isChecked = isChecked;
    }

    public Boolean getIsMandatory() {
        return isMandatory;
    }

    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    public long getCategoryid() {
        return categoryid;
    }

    public void setCategoryid(long categoryid) {
        this.categoryid = categoryid;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        long __key = this.categoryid;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'categoryid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            categoryid = category.getId();
            category__resolvedKey = categoryid;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HowOften> getHowOftenList() {
        if (howOftenList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HowOftenDao targetDao = daoSession.getHowOftenDao();
            List<HowOften> howOftenListNew = targetDao._querySource_HowOftenList(id);
            synchronized (this) {
                if(howOftenList == null) {
                    howOftenList = howOftenListNew;
                }
            }
        }
        return howOftenList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHowOftenList() {
        howOftenList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<InOutTransaction> getInOutTransactionList() {
        if (inOutTransactionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InOutTransactionDao targetDao = daoSession.getInOutTransactionDao();
            List<InOutTransaction> inOutTransactionListNew = targetDao._querySource_InOutTransactionList(id);
            synchronized (this) {
                if(inOutTransactionList == null) {
                    inOutTransactionList = inOutTransactionListNew;
                }
            }
        }
        return inOutTransactionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInOutTransactionList() {
        inOutTransactionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
