package cashflowdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cashflowdb.InitialBudget;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INITIAL_BUDGET".
*/
public class InitialBudgetDao extends AbstractDao<InitialBudget, String> {

    public static final String TABLENAME = "INITIAL_BUDGET";

    /**
     * Properties of entity InitialBudget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BugetID = new Property(0, String.class, "bugetID", true, "BUGET_ID");
        public final static Property Moneytype = new Property(1, String.class, "moneytype", false, "MONEYTYPE");
        public final static Property Pound = new Property(2, Double.class, "pound", false, "POUND");
        public final static Property Startdate = new Property(3, java.util.Date.class, "startdate", false, "STARTDATE");
        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
    };


    public InitialBudgetDao(DaoConfig config) {
        super(config);
    }
    
    public InitialBudgetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INITIAL_BUDGET\" (" + //
                "\"BUGET_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bugetID
                "\"MONEYTYPE\" TEXT," + // 1: moneytype
                "\"POUND\" REAL," + // 2: pound
                "\"STARTDATE\" INTEGER," + // 3: startdate
                "\"COMMENT\" TEXT);"); // 4: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INITIAL_BUDGET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InitialBudget entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getBugetID());
 
        String moneytype = entity.getMoneytype();
        if (moneytype != null) {
            stmt.bindString(2, moneytype);
        }
 
        Double pound = entity.getPound();
        if (pound != null) {
            stmt.bindDouble(3, pound);
        }
 
        java.util.Date startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindLong(4, startdate.getTime());
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(5, comment);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InitialBudget readEntity(Cursor cursor, int offset) {
        InitialBudget entity = new InitialBudget( //
            cursor.getString(offset + 0), // bugetID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // moneytype
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // pound
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startdate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InitialBudget entity, int offset) {
        entity.setBugetID(cursor.getString(offset + 0));
        entity.setMoneytype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPound(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setStartdate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(InitialBudget entity, long rowId) {
        return entity.getBugetID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(InitialBudget entity) {
        if(entity != null) {
            return entity.getBugetID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
